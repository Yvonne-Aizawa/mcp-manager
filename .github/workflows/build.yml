name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: mcp-manager_linux-amd64
          - name: windows-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: mcp-manager_windows-amd64
          - name: macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
            artifact: mcp-manager_macos-amd64
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            artifact: mcp-manager_macos-arm64

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Build application
        run: npm run tauri build -- --target ${{ matrix.platform.target }}

      - name: Prepare artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          # AppImage
          if [ -f src-tauri/target/${{ matrix.platform.target }}/release/bundle/appimage/*.AppImage ]; then
            cp src-tauri/target/${{ matrix.platform.target }}/release/bundle/appimage/*.AppImage artifacts/mcp-manager_${{ matrix.platform.name }}.AppImage
          fi
          # Debian package
          if [ -f src-tauri/target/${{ matrix.platform.target }}/release/bundle/deb/*.deb ]; then
            cp src-tauri/target/${{ matrix.platform.target }}/release/bundle/deb/*.deb artifacts/mcp-manager_${{ matrix.platform.name }}.deb
          fi
          # Binary
          if [ -f src-tauri/target/${{ matrix.platform.target }}/release/mcp-manager ]; then
            cp src-tauri/target/${{ matrix.platform.target }}/release/mcp-manager artifacts/mcp-manager_${{ matrix.platform.name }}
          fi

      - name: Prepare artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          # MSI installer
          if (Test-Path "src-tauri/target/${{ matrix.platform.target }}/release/bundle/msi/*.msi") {
            Copy-Item "src-tauri/target/${{ matrix.platform.target }}/release/bundle/msi/*.msi" "artifacts/mcp-manager_${{ matrix.platform.name }}.msi"
          }
          # NSIS installer
          if (Test-Path "src-tauri/target/${{ matrix.platform.target }}/release/bundle/nsis/*.exe") {
            Copy-Item "src-tauri/target/${{ matrix.platform.target }}/release/bundle/nsis/*.exe" "artifacts/mcp-manager_${{ matrix.platform.name }}.exe"
          }
          # Binary
          if (Test-Path "src-tauri/target/${{ matrix.platform.target }}/release/mcp-manager.exe") {
            Copy-Item "src-tauri/target/${{ matrix.platform.target }}/release/mcp-manager.exe" "artifacts/mcp-manager_${{ matrix.platform.name }}.exe"
          }

      - name: Prepare artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          # DMG installer
          if [ -f src-tauri/target/${{ matrix.platform.target }}/release/bundle/dmg/*.dmg ]; then
            cp src-tauri/target/${{ matrix.platform.target }}/release/bundle/dmg/*.dmg artifacts/mcp-manager_${{ matrix.platform.name }}.dmg
          fi
          # App bundle
          if [ -d src-tauri/target/${{ matrix.platform.target }}/release/bundle/macos/*.app ]; then
            cd src-tauri/target/${{ matrix.platform.target }}/release/bundle/macos/
            tar -czf ../../../../../../artifacts/mcp-manager_${{ matrix.platform.name }}.app.tar.gz *.app
            cd -
          fi
          # Binary
          if [ -f src-tauri/target/${{ matrix.platform.target }}/release/mcp-manager ]; then
            cp src-tauri/target/${{ matrix.platform.target }}/release/mcp-manager artifacts/mcp-manager_${{ matrix.platform.name }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: artifacts/*
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display structure of downloaded files
        run: ls -la release-artifacts/

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**/*
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
          body: |
            ## MCP Manager Release
            
            ### Downloads
            
            **Linux:**
            - `mcp-manager_linux-amd64.AppImage` - Portable AppImage (recommended)
            - `mcp-manager_linux-amd64.deb` - Debian package
            - `mcp-manager_linux-amd64` - Raw binary
            
            **Windows:**
            - `mcp-manager_windows-amd64.exe` - NSIS installer (recommended)
            - `mcp-manager_windows-amd64.msi` - MSI installer
            
            **macOS:**
            - `mcp-manager_macos-amd64.dmg` - DMG installer for Intel Macs
            - `mcp-manager_macos-arm64.dmg` - DMG installer for Apple Silicon Macs
            - `mcp-manager_macos-*.app.tar.gz` - App bundle (alternative)
            
            ### Installation
            
            1. Download the appropriate file for your platform
            2. For installers (`.exe`, `.msi`, `.dmg`), run and follow the installation wizard
            3. For AppImage (Linux), make executable and run: `chmod +x mcp-manager_linux-amd64.AppImage && ./mcp-manager_linux-amd64.AppImage`
            4. For `.deb` packages: `sudo dpkg -i mcp-manager_linux-amd64.deb`
            
            ### System Requirements
            
            - **Linux**: GTK 3, WebKit2GTK
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.15 or later
            
            For MCP server management, you may also need:
            - Docker (for Docker-based servers)
            - Node.js (for NPX-based servers) 
            - Python/uv (for UVX-based servers)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev
          npm ci

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Run tests
        run: |
          npm run test || echo "No tests configured"
          cd src-tauri
          cargo test

      - name: Check formatting
        run: |
          cd src-tauri
          cargo fmt -- --check

      - name: Run clippy
        run: |
          cd src-tauri
          cargo clippy -- -D warnings